---
- name: Set terraplate_instance hash values
  set_fact:
    terraplate_instance:
      find_me_in: component/app/tasks/main.yml
      namespace: '{{ terraplate_instance_namespace }}'
      name: '{{ terraplate_instance_name }}'
      hash: '{{ terraplate_instance_namespace }}-{{ terraplate_instance_name }}'
      slash: '{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}'
      dir: '{{ terraplate.app_dir }}/{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}'
      # Below are additional to terraplate_component
      tfvars_file: '{{ terraplate.app_dir }}/{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}/terraform.tfvars'
      module_path: '{{ terraplate.modules_path }}/{{ terraplate_component.slash }}'
      vars:
        providers: '{{ providers | default({}) }}'
        remote_state_keys: '{{ remote_state_keys | default({}) }}'
        dependencies: '{{ dependencies | default({}) }}'

- name: Debug terraplate_instance variables
  debug:
    var: terraplate_instance
    # verbosity: 1

- name: '[component/app] Ensure the instance directory exists'
  file:
    path: '{{ terraplate_instance.dir }}'
    state: directory

- name: '[component/app] Add terragrunt config to {{ terraplate_instance.slash }}/terraform.tfvars'
  blockinfile:
    create: yes
    dest: '{{ terraplate_instance.tfvars_file }}'
    marker: '# {mark} component'
    block: |
      terragrunt = {
        terraform {
          source = "{{ terraplate_instance.module_path }}"
        }
        include = {
          path = "${find_in_parent_folders()}"
        }
      {% if terraplate_instance.vars.dependencies is defined %}
        dependencies {
          paths = [
      {% for dependency in terraplate_instance.vars.dependencies %}
            "{{ dependency }}",
      {% endfor %}
          ]
        }
      {% endif %}
      }
      {% set pad_length = 60 %}

      {# TODO set providers in tasks/main or in the component_#}
      {% set providers = terraplate_component.needs.providers | default({}) %}
      {% for provider in providers %}
      {% set provider_vars = terraplate_instance.vars.providers[provider] | default(terraplate_default_providers[provider]) %}
      {% for var, value in provider_vars.iteritems() %}
      {% set key = 'provider_' + provider + '_' + var | replace('-', '_') %}
      {% set key_pad = ' ' * (pad_length - (key | length)) %}
      {{ key }}{{ key_pad }} = "{{ value }}"
      {% endfor %}
      {% endfor %}

      {% set remote_states = terraplate_component.needs.remote_states | default({}) %}
      {% for provider in remote_states %}
      {% set provider_vars = terraplate_instance.vars.remote_state_keys[provider] | default(terraplate_default_remote_state_keys[provider]) %}
      {% for var, value in provider_vars.iteritems() %}
      {% set key = 'remote_state_' + provider + '_' + var | replace('-', '_') %}
      {% set key_pad = ' ' * (pad_length - (key | length)) %}
      {{ key }}{{ key_pad }} = "{{ value }}"
      {% endfor %}
      {% endfor %}

      {#}
      {% if xremote_states is defined %}
      {% for key, value in remote_states.iteritems() %}
      {% set key_pad = 'remote_state_key_' + (key | replace('-', '_')) + (' ' * (pad_length - 17 - (key | length))) %}
      {% if value.startswith('global') %}
      {{ key_pad }} = "{{ value }}"
      {% else %}
      {{ key_pad }} = "{{ package.directory }}/{{ infrastructure_env }}/{{ value }}"
      {% endif %}
      {% endfor %}
      {% endif %}
      {#}
