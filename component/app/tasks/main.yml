---
- name: Set tpl_component_app values
  set_fact:
    tpl_component_app:
      namespace: '{{ terraplate_instance_namespace }}'
      name: '{{ terraplate_instance_name }}'
      hash: '{{ terraplate_instance_namespace }}-{{ terraplate_instance_name }}'
      slash: '{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}'
      dir: '{{ tpl_service.app_dir }}/{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}'
      # Below are additional to terraplate_component
      tfvars_file: '{{ tpl_service.app_dir }}/{{ terraplate_instance_namespace }}/{{ terraplate_instance_name }}/terraform.tfvars'
      module_path: '{{ tpl_service.modules_path }}/{{ tpl_component.slash }}'
      providers: '{{ providers | default({}) }}'
      remote_state_keys: '{{ remote_state_keys | default({}) }}'
      dependencies: '{{ dependencies | default({}) }}'

- name: Debug tpl_component_app
  debug:
    var: tpl_component_app
    # verbosity: 1

- name: Ensure the component app directory exists
  file:
    path: '{{ tpl_component_app.dir }}'
    state: directory

- name: 'Add terragrunt config to {{ tpl_component_app.tfvars_file }}'
  blockinfile:
    create: yes
    dest: '{{ tpl_component_app.tfvars_file }}'
    marker: '# {mark} component'
    block: |
      terragrunt = {
        terraform {
          source = "{{ tpl_component_app.module_path }}"
        }
        include = {
          path = "${find_in_parent_folders()}"
        }
      {% if tpl_component_app.dependencies is defined %}
        dependencies {
          paths = [
      {% for dependency in tpl_component_app.dependencies %}
            "{{ dependency }}",
      {% endfor %}
          ]
        }
      {% endif %}
      }
      {% set pad_length = 60 %}

      {# TODO set providers in tasks/main or in the component_#}
      {% set providers = tpl_component.needs.providers | default({}) %}
      {% for provider in providers %}
      {% set provider_vars = tpl_component_app.providers[provider] | default(tpl_service.default_providers[provider]) %}
      {% for var, value in provider_vars.iteritems() %}
      {% set key = 'provider_' + provider + '_' + var | replace('-', '_') %}
      {% set key_pad = ' ' * (pad_length - (key | length)) %}
      {{ key }}{{ key_pad }} = "{{ value }}"
      {% endfor %}
      {% endfor %}

      {% set remote_states = tpl_component.needs.remote_states | default({}) %}
      {% for provider in remote_states %}
      {% set provider_vars = tpl_component_app.remote_state_keys[provider] | default(tpl_service.default_remote_state_keys[provider]) %}
      {% for var, value in provider_vars.iteritems() %}
      {% set key = 'remote_state_' + provider + '_' + var | replace('-', '_') %}
      {% set key_pad = ' ' * (pad_length - (key | length)) %}
      {{ key }}{{ key_pad }} = "{{ value }}"
      {% endfor %}
      {% endfor %}

      {#}
      {% if xremote_states is defined %}
      {% for key, value in remote_states.iteritems() %}
      {% set key_pad = 'remote_state_key_' + (key | replace('-', '_')) + (' ' * (pad_length - 17 - (key | length))) %}
      {% if value.startswith('global') %}
      {{ key_pad }} = "{{ value }}"
      {% else %}
      {{ key_pad }} = "{{ package.directory }}/{{ infrastructure_env }}/{{ value }}"
      {% endif %}
      {% endfor %}
      {% endif %}
      {#}
