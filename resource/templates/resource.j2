{% macro render_value(var, resource_var) -%}
  {# If no value has been provided in playbook, stage or component vars then use the var's default value #}
  {%- set value = (resource_var | default(var.default)) %}

  {%- if var.type is not defined %}"{{ value }}"
  {%- elif var.type == 'map' %}{ {% for name, mvalue in value.iteritems() %}{{ name }} = "{{ mvalue }}" {% endfor %}}
  {%- elif var.type == 'list' %}[{% for lvalue in value %} "{{ lvalue }}",{% endfor %}]
  {%- else %}{{ "WARN: invalid type."/0 }}
  {%- endif %}
{%- endmacro -%}


{% macro render_var(var, var_string) -%}
  {% set is_list = (var.type is defined and var.type == 'list') %}
  {%- if is_list %}[{% endif %}"${var.{{ var_string }}}"{% if is_list %}]{% endif %}
{%- endmacro %}


{% macro render_component_provider(key, value, tpl_component) -%}
  {%- set reference = tpl_component.provides[key] %}
  {#- if not is_list %}{%- set reference = [reference] %}{%- endif #}
  {%- set reference = [reference] %}
  {%- set is_list = (value.type is defined and value.type == 'list') %}
  {%- if is_list %}[{%- endif %}

  {%- for entry in reference %}"${
    {#- remote state var names reference module output vars as defeind at the end of this file #}
    {%- if entry.provider in tpl_component.needs.remote_states %}data.terraform_remote_state.
    {#- when referencing a module var the name is: module.<module_name>.<module's_wrapped_resource_output_name> #}
    {%- else %}module.{{ tpl_component.lib.dash }}-
    {%- endif %}{{ entry.provider | replace('_', '-') }}.{{ entry.name | default(key) }}}"
    {%- if is_list %},{%- endif %}
  {%- endfor %}
  {%- if is_list %}]{%- endif %}
{%- endmacro %}


{% macro render_resource_provider(key, resource_var, tpl_component) %}
"${module.{{ tpl_component.lib.dash }}-{{ resource_var.provider | replace('_', '-') }}.{{ resource_var.name | default(key) }}}"
{%- endmacro %}
