{% import 'resource.j2' as resource_writer %}
# '{{ tpl_resource.root_name }}' module (resource wrapper) {{ ansible_managed }}
# module name: {{ tpl_resource.root_name }}
# wrapped resource: {{ tpl_resource.meta.name }}
{% if not tpl_resource.static %}
{% for nvars in [tpl_resource.variables, tpl_resource.env_vars] %}
  {%- for key, value in nvars.iteritems() %}

variable "{{ tpl_resource.root_name_underscore }}_{{ key }}" {
    {%- if value.type is defined %} type = "{{ value.type }}"{%- endif %} }
  {%- endfor %}
{% endfor %}
{# declare any external_vars that were provided by the component or playbook #}
{% for nvars in [tpl_resource.external_vars] %}
  {%- for key, value in nvars.iteritems() %}
    {%- if key in tpl_resource_vars and tpl_resource_vars[key].provider is not defined %}

variable "{{ tpl_resource.root_name_underscore }}_{{ key }}" {
      {%- if value.type is defined %} type = "{{ value.type }}"{%- endif %} }
    {%- endif %}
  {%- endfor %}
{% endfor %}
{% endif %}


{# TODO: maybe all the is_list or map, etc should be figured out here and rendered here rather than in the partial #}
{# That would DRY up the logic around that stuff #}
{% set pad_length = 40 %}
module "{{ tpl_resource.root_name }}" {
  source {{ ' ' * (pad_length - 7) }} = "{{ tpl_resource.path_to_resource }}"
{% for nvars in [tpl_resource.variables, tpl_resource.env_vars, tpl_resource.external_vars] %}
  {%- for key, value in nvars.iteritems() %}

  {{ key }}{{ ' ' * (pad_length - (key | length)) }} =

    {#- if the resource declares a provider for this var then use it #}
    {%- if key in tpl_resource_vars and tpl_resource_vars[key].provider is defined %} {{ resource_writer.render_resource_provider(key, value, tpl_resource_vars[key], tpl_component) }}

    {#- if the component declares a provider for this var then use it #}
    {%- elif key in tpl_component.provides %} {{ resource_writer.render_component_provider(key, value, tpl_component) }}

    {#- if the resource is declared as static then write the values directly to the component #}
    {%- elif tpl_resource.static %} {{ resource_writer.render_value(value, tpl_resource_vars[key]) }}

    {#- otherwise, write out var.name #}
    {%- else %} {{ resource_writer.render_var(value, (tpl_resource.root_name_underscore + '_' + key)) }}

    {%- endif %}
  {%- endfor %}
{%- endfor %}

}
{% if (tpl_resource.output_vars | length) > 0 %}

# Output vars are consumed when referenced by a remote_state
# TODO: put an example of the exact string that could be here using the app.dir
# A remote_state is used from outside this component to get the values outputted below
# The output var name is the resource name _ the resource's variable name
# The output value is the module_name . the resource's variable name
{% for key, value in tpl_resource.output_vars.iteritems() %}
  {%- set is_list = (value.type is defined and value.type == 'list') %}

# module name: {{ tpl_resource.root_name }}   wrapped resource: {{ tpl_resource.name }}   resource output var name: {{ key }}
output "{{ tpl_resource.name }}_{{ key }}" {
  description = "{{ value.description }}"
  value       = {% if is_list %}[ {% endif %}"${module.{{ tpl_resource.root_name }}.{{ key }}}"{% if is_list %} ]{% endif %}

}
{% endfor %}
{% endif %}
