# Set up the variables for rendering modules
---
- name: '[main] Set resource_meta_i'
  set_fact:
    resource_meta_i: "{{ resource_meta | combine(resource | default({})) }}"

- name: '[main] Set module_meta'
  set_fact:
    module_meta: "{{ resource_meta_i | combine(meta | default({})) }}"
    res_dir: '{{ resource_dir }}' # so roles can write files into the resource directory

- name: '[main] {{ module_task_name }} Get user vars for resource, module and module instance'
  set_fact:
    module_name: '{{ module_meta.ns }}/{{ module_meta.name }}'
    user_vars:
      resource: '{{ hostvars[inventory_hostname][user_vars_names.resource] | default({}) }}'
      module: '{{ hostvars[inventory_hostname][user_vars_names.module] | default({}) }}'
      instance: '{{ hostvars[inventory_hostname][user_vars_names.instance] | default({}) }}'

- name: '[main] {{ module_task_name }} Set the module instance properties'
  set_fact:
    this:
      class:
        meta: "{{ module_meta | combine({'var_names': user_vars_names}) }}"
        # variables come from the resource; tfvars come from the component
        tfvars: '{{ user_vars.resource.tfvars | default({}) | combine(tfvars | default({})) | combine(user_vars.module.tfvars | default({})) }}'
      meta: {}
      tfvars: '{{ user_vars.instance.tfvars | default({}) }}'

- name: "[main] {{ module_task_name }} Add this module to the component's list of modules"
  set_fact:
    c_this:
      class: '{{ c_this.class }}'
      meta: '{{ c_this.meta }}'
      vars: '{{ c_this.vars }}'
      modules: '{{ c_this.modules | combine({ module_name: this }) }}'
      # module_vars: '{{ c_this.module_vars }}'
      # external_vars: '{{ c_this.external_vars }}'
      # output_vars: '{{ c_this.output_vars }}'

- name: '[main] {{ module_task_name }} Debug vars'
  debug: var='{{ item }}'
  with_items: [user_vars_names, this]
  tags: debug

# TODO: the combine of remote_states (and probably also tfvars) is not DRY b/c this is already done in the component
- name: '[main] {{ module_task_name }} Merge resource, module and module_instance values into provision hash'
  set_fact:
    provision:
      tfvars: '{{ this.class.tfvars | combine(this.tfvars) }}'
      # remote_states: '{{ c_this.class.vars.remote_states | default({}) | combine(c_this.vars.remote_states | default({})) }}'
      remote_states: '{{ c_this.class.remote_states | default({}) | combine(c_this.vars.remote_states | default({})) }}'
